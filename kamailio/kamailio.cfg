#!KAMAILIO
###### Sentencias
#!define WITH_MYSQL
#!define WITH_USRLOCDB
#!define WITH_MULTIDOMAIN
# #!define WITH_AUTH
#!define WITH_ACCDB
#!define WITH_NAT
#!define WITH_NATSIPPING
#!define WITH_PRESENCE
#!define WITH_IPAUTH
#!define WITH_ALIASDB
#!define WITH_PSTN
# #!define WITH_DISPATCHER
#!define WITH_DROUTING

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########
# *** Value defines - IDs used later in config
#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!ifndef DBURL
#!trydef DBURL "mysql://kamailio:kamailiopw@172.18.0.2:3306/kamailio"
#!endif
#!endif
#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes */
children=8

/* uncomment the next line to disable TCP (default on) */
# disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
auto_aliases=no

/* uncomment and configure the following line if you want Kamailio to
 * bind on a specific interface/port/proto (default bind on all available) */
listen=udp:172.18.0.5:5060

alias=45.162.185.34:5060

#!ifdef WITH_TLS
enable_tls=yes
#!endif

/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3605

user_agent_header="User-Agent: MiBOT Agent"
server_header="Server: MiBOT Server"

####### Custom Parameters #########
/* These parameters can be modified runtime via RPC interface
 * - see the documentation of 'cfg_rpc' module.
 *
 * Format: group.id = value 'desc' description
 * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */

#!ifdef WITH_PSTN
/* PSTN GW Routing
 *
 * - pstn.gw_ip: valid IP or hostname as string value, example:
 * pstn.gw_ip = "10.0.0.101" desc "My PSTN GW Address"
 *
 * - by default is empty to avoid misrouting */
pstn.gw_ip = "190.96.73.130" desc "PSTN GW Address"
pstn.gw_port = "5060" desc "PSTN GW Port"
#!endif

#!ifdef WITH_VOICEMAIL
/* VoiceMail Routing on offline, busy or no answer
 *
 * - by default Voicemail server IP is empty to avoid misrouting */
voicemail.srv_ip = "" desc "VoiceMail IP Address"
voicemail.srv_port = "5060" desc "VoiceMail Port"
#!endif

####### Modules Section ########
/* set paths to location of modules */
# mpath="//lib64/kamailio/modules/"

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "dialog.so"
loadmodule "msilo.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "uri_db.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#!ifdef WITH_HOMER
loadmodule "siptrace.so"
#!endif

# ----------------- setting module-specific parameters ---------------

# ---- uri_db params ----
modparam("uri_db", "db_url", DBURL)
modparam("uri_db", "db_table", "subscriber")
modparam("uri_db", "use_uri_table", 0)

#### msilo params
modparam("msilo", "db_url", DBURL)
modparam("msilo", "expire_time", 604800)

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
# modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the, 1)
modparam("rr", "append_fromtag", 1)

# ----- registrar params -----
modparam("registrar", "default_expires", 1800)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "min_expires", 60)
modparam("registrar", "append_branches", 1)
modparam("registrar", "retry_after", 60)
modparam("registrar", "max_contacts", 5)

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$td")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
        "src_user=$fU;src_domain=$fd;src_ip=$si;"
        "dst_ouser=$tU;dst_user=$rU;dst_domain=$td")
modparam("acc", "cdr_enable", 1)
modparam("acc", "cdr_expired_dlg_enable", 1)
modparam("acc", "cdr_start_on_confirmed", 1)
modparam("acc", "cdr_log_enable", 1)
modparam("acc", "failed_transaction_flag", 4)
modparam("acc", "cdrs_table", "acc_cdrs")
modparam("acc", "cdr_extra", "llamante=$fU;domllamante=$fd;llamado=$tU;domllamado=$td;codigo_sip=$rs")
#!endif

# ----- usrloc params -----
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 3)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!endif

# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif

# ----- speeddial params -----
#!ifdef WITH_SPEEDDIAL
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif

# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
/* register callback to match myself condition with domains list */
modparam("domain", "register_myself", 1)
#!endif

#!ifdef WITH_NAT
# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:rtpengine:22222")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@35.247.203.158")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "//etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

# ----- dialog params -----
modparam("dialog", "dlg_flag", 0)
modparam("dialog", "default_timeout", 21600)
modparam("dialog", "db_url", DBURL)
modparam("dialog", "db_mode", 1)
modparam("dialog", "send_bye", 1)
modparam("dialog", "ka_timer", 3)
modparam("dialog", "ka_interval", 30)
modparam("dialog", "ka_failed_limit", 1)
modparam("dialog", "track_cseq_updates", 1)

# #!ifdef WITH_DISPATCHER
# # ----- dispatcher params
#loadmodule "dispatcher.so"
#modparam("dispatcher", "db_url", DBURL)
#modparam("dispatcher", "flags", 3)
#modparam("dispatcher", "xavp_dst", "$avp(dsdst)")
#modparam("dispatcher", "xavp_dst_mode", 0)
#modparam("dispatcher", "ds_ping_method", "OPTIONS")
#modparam("dispatcher", "ds_ping_from", "sip:mibot@35.247.203.158")
#modparam("dispatcher", "ds_ping_interval", 30)
#modparam("dispatcher", "ds_probing_threshold", 2)
#modparam("dispatcher", "ds_inactive_threshold", 1)
#modparam("dispatcher", "ds_ping_reply_codes", "code=404")
#modparam("dispatcher", "ds_probing_mode", 1)
#modparam("dispatcher", "ds_ping_latency_stats", 1)
#modparam("dispatcher", "ds_hash_size", 8)
#modparam("dispatcher", "ds_hash_expire", 3600)
#modparam("dispatcher", "ds_timer_mode", 1)
# #!endif

#!ifdef WITH_DROUTING
# -----drouting module and keepalive-----
loadmodule "keepalive.so"
loadmodule "drouting.so"
modparam("drouting", "ruri_avp", '$avp(dr_ruri)')
modparam("drouting", "use_domain", 1)
modparam("drouting", "enable_keepalive", 1)
modparam("drouting", "db_url", DBURL)
modparam("keepalive", "ping_interval", 20)
#!endif

# ----- uac module -----
loadmodule "uac.so"
modparam("uac", "reg_db_url", DBURL)
modparam("uac", "reg_retry_interval", 300)
modparam("uac", "reg_contact_addr", "sip.mibot.cl:5060")
modparam("uac","auth_username_avp","$avp(auser)")
modparam("uac","auth_password_avp","$avp(apass)")
modparam("uac","auth_realm_avp","$avp(arealm)")

#!ifdef WITH_HOMER
# check IP and port of your capture node
#modparam("siptrace", "duplicate_uri", "sip:10.158.15.245:9060")
#modparam("siptrace", "xheaders_write", 0)
#modparam("siptrace", "hep_mode_on", 1)
#modparam("siptrace", "hep_version", 3)
#modparam("siptrace", "trace_to_database", 0)
#modparam("siptrace", "trace_flag", 22)
#modparam("siptrace", "trace_on", 1)
#modparam("siptrace", "trace_mode", 1)
#!endif

####### Routing Logic ########


/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

	# per request initial checks
	route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# authentication
	route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {
                setflag(FLT_ACC); # do accounting
                dlg_manage();
                dlg_set_property("ka-src");
                dlg_set_property("ka-dst");
	}

	# dispatch requests to foreign domains
	route(SIPOUT);

	### requests for my local domains

	# handle presence related requests
#	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}


	# # dispatch destinations to PSTN
	# route(PSTN);

	# user location service
	route(LOCATION);
	#!ifdef WITH_DISPATCHER
	route(DISPATCHER);
	 #!endif
	#!ifdef WITH_DROUTING
	route(DROUTING);
	#!endif
}
#!ifdef WITH_DROUTING
route[DROUTING] {
	if (do_routing()) {
		t_on_failure("GWFAILURE");
		route(RELAY);
	} else {

		send_reply("404","No Route found");
		exit;
	 }
}
#!endif

#!ifdef WITH_DISPATCHER
route[DISPATCHER] {
	if(!is_method("INVITE")) return;
		if(!ds_select_dst("1", "10")) {
			send_reply("404", "No destination");
			exit;
		}
		xlog("L_NOTICE", "script: llamada a $ru via $du\n");
		t_on_failure("DISPATCHER_FAILURE");
		route(RELAY);
		exit;
}
#!endif
# Wrapper for relaying requests
route[RELAY] {

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}
	if (is_method("MESSAGE")) {
		 if(!t_is_set("failure_route")) t_on_failure("MESSAGE_FAILURE");
	 }
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif
	if($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) return;

	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		route(DLGURI);
		if (is_method("BYE")) {
			setflag(FLT_ACC); # do accounting ...
			setflag(FLT_ACCFAILED); # ... even if the transaction fails
		} else if ( is_method("ACK") ) {
			# ACK is forwarded statelessly
			route(NATMANAGE);
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if (is_method("SUBSCRIBE") && uri == myself) {
		# in-dialog subscribe requests
		#route(PRESENCE);
		exit;
	}
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

# Handle SIP registrations
route[REGISTRAR] {
	if (!is_method("REGISTER")) return;

	if(isflagset(FLT_NATS)) {
		setbflag(FLB_NATB);
#!ifdef WITH_NATSIPPING
		# do SIP NAT pinging
		setbflag(FLB_NATSIPPING);
#!endif
	}
	if (!save("location")) {
		sl_reply_error();
	}
	m_dump();
	exit;
}

# User location service
route[LOCATION] {

#!ifdef WITH_SPEEDDIAL
	# search for short dialing - 2-digit extension
	if($rU=~"^[0-9][0-9]$") {
		if(sd_lookup("speed_dial")) {
			route(SIPOUT);
		}
	}
#!endif

#!ifdef WITH_ALIASDB
	# search in DB-based aliases
	alias_db_lookup("dbaliases");
#!endif

	if (!does_uri_exist()) {
                return;
                exit;
        }

	$avp(oexten) = $rU;
	if (!lookup("location")) {
		$var(rc) = $rc;
		route(TOVOICEMAIL);
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				 if (is_method("MESSAGE")) {
					 if (m_store("$ru")) {
						 xlog("L_NOTICE","BM Mensaje fuera de linea almacenato");
						 if (!t_reply("202", "Accepted")) {
							 sl_reply_error();
						 }
					 } else {
						 xlog("L_NOTICE","BM Mensaje fuera de linea no almacenato");
						 if (!t_reply("503", "Service Unavailable")) {
							 sl_reply_error();
						 }
					 }
				 }
				 if(!is_method("MESSAGE")) {
					 if (!t_reply("404", "Not found")) {
						 sl_reply_error();
					 }
				 }
				 exit;

			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE")) {
		setflag(FLT_ACCMISSED);
	}
	t_on_failure("AUTTRONCAL");
	route(RELAY);
	exit;
}

# IP authorization and user authentication
route[AUTH] {
#!ifdef WITH_AUTH
	if ((is_method("MESSAGE")) && ((src_ip==myself))) return;

#!ifdef WITH_IPAUTH
	if((!is_method("REGISTER")) && allow_source_address()) {
		# source IP allowed
		return;
	}
#!endif

	if (is_method("REGISTER") || from_uri==myself) {
                $var(autent_cod) = auth_check("$fd", "subscriber","1");
                if ( $var(autent_cod) == -2 || $var(autent_cod) == -3 ) {
                        xlog("L_NOTICE","error de autent para $fU@$fd desde $si causa $var(autent_cod)");
                        sl_send_reply("403","No Autorizado!!");
                        exit;
                }

                if (!auth_check("$fd", "subscriber", "1")) {
                        auth_challenge("$fd", "0");
                        exit;
                }
                if(!is_method("REGISTER|PUBLISH"))
                        consume_credentials();
	}

	if (from_uri!=myself && uri!=myself) {
		sl_send_reply("403","Not relaying");
		exit;
	}

#!endif
	return;
}

# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			if(is_first_hop()) {
				 if(is_method("MESSAGE")) {
					fix_nated_contact();
				} else {
					set_contact_alias();
				}
			}
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {
#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

	if(nat_uac_test("8")) {
		rtpengine_manage("SIP-source-address forward=127.0.0.1:4000 replace-origin replace-session-connection");
	} else {
		rtpengine_manage("forward=127.0.0.1:4000 replace-origin replace-session-connection");
	}

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop())
				set_contact_alias();
		}
	}
#!endif
	return;
}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
#!endif
	return;
}

# Routing to foreign domains
route[SIPOUT] {
        if (uri==myself)
        return;
        else {
        xlog("L_NOTICE","La solicitud no es local ($ru). Descartada");
        sl_send_reply("403", "La solicitud no se puede entregar");
        exit;
        }
}

# PSTN GW routing
route[PSTN] {
#!ifdef WITH_PSTN
	# check if PSTN GW IP is defined
	if (strempty($sel(cfg_get.pstn.gw_ip))) {
		xlog("SCRIPT: PSTN routing enabled but pstn.gw_ip not defined\n");
		return;
	}

	# route to PSTN dialed numbers starting with '+' or '00'
	#     (international format)
	# - update the condition to match your dialing rules for PSTN routing
	if(!($rU=~"^(\+|00)[1-9][0-9]{3,20}$")) return;
	uac_replace_from("926","sip:926@181.143.174.34");

	# only local users allowed to call
	if(!is_from_local()) {
		sl_send_reply("403", "Not Allowed");
		exit;
	}

	if (strempty($sel(cfg_get.pstn.gw_port))) {
		$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip);
	} else {
		$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip) + ":"
					+ $sel(cfg_get.pstn.gw_port);
	}
	t_on_failure("AUTTRONCAL");
	route(RELAY);
	exit;
#!endif

	return;
}

# XMLRPC routing
#!ifdef WITH_XMLRPC
route[XMLRPC] {
	# allow XMLRPC from localhost
	if ((method=="POST" || method=="GET")
			&& (src_ip==127.0.0.1)) {
		# close connection only for xmlrpclib user agents (there is a bug in
		# xmlrpclib: it waits for EOF before interpreting the response).
		if ($hdr(User-Agent) =~ "xmlrpclib")
			set_reply_close();
		set_reply_no_connect();
		dispatch_rpc();
		exit;
	}
	send_reply("403", "Forbidden");
	exit;
}
#!endif

# Routing to voicemail server
route[TOVOICEMAIL] {
#!ifdef WITH_VOICEMAIL
	if(!is_method("INVITE|SUBSCRIBE")) return;

	# check if VoiceMail server IP is defined
	if (strempty($sel(cfg_get.voicemail.srv_ip))) {
		xlog("SCRIPT: VoiceMail routing enabled but IP not defined\n");
		return;
	}
	if(is_method("INVITE")) {
		if($avp(oexten)==$null) return;

		$ru = "sip:" + $avp(oexten) + "@" + $sel(cfg_get.voicemail.srv_ip)
				+ ":" + $sel(cfg_get.voicemail.srv_port);
	} else {
		if($rU==$null) return;

		$ru = "sip:" + $rU + "@" + $sel(cfg_get.voicemail.srv_ip)
				+ ":" + $sel(cfg_get.voicemail.srv_port);
	}
	route(RELAY);
	exit;
#!endif

	return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");
	if(status=~"[12][0-9][0-9]") {
		route(NATMANAGE);
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	route(NATMANAGE);

	if (t_is_canceled()) exit;

#!ifdef WITH_BLOCK3XX
	# block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		t_reply("404","Not found");
		exit;
	}
#!endif

#!ifdef WITH_BLOCK401407
	# block call redirect based on 401, 407 replies.
	if (t_check_status("401|407")) {
		t_reply("404","Not found");
		exit;
	}
#!endif

#!ifdef WITH_VOICEMAIL
	# serial forking
	# - route to voicemail on busy or no answer (timeout)
	if (t_check_status("486|408")) {
		$du = $null;
		route(TOVOICEMAIL);
		exit;
	}
#!endif
}
failure_route[MESSAGE_FAILURE] {
	if (m_store()) {
		xlog("L_NOTICE","Mensaje fuera de linea almacenato");
		t_reply("202", "Accepted");
	} else {
		xlog("L_NOTICE","Mensaje fuera de linea no almacenato");
		t_reply("503", "Service Unavailable");
	}
}


#!ifdef WITH_DISPATCHER
failure_route [DISPATCHER_FAILURE] {
	if (t_is_canceled()) {
		exit;
	}
	if (t_check_status("500") || t_branch_timeout() || !t_branch_replied()) {
		if(ds_next_dst()) {
			t_on_failure("DISPATCHER_FAILURE");
			t_relay();
			exit;
		}
	else {
		send_reply("404", "No destination");
		exit;
	}
	}
}
#!endif

#!ifdef WITH_DROUTING
failure_route[GWFAILURE] {
	if (t_is_canceled()) {
		exit;
	}
	xlog("L_NOTICE","Gateway Failover");
	# detect failure and redirect to next available GW
	if (t_check_status("(408)|([56][0-9][0-9])")) {
		xlog("Failed GW $rd detected \n");
	if ( use_next_gw() ) {
		t_on_failure("GWFAILURE");
		t_relay();
	exit;
	}
	send_reply("500","All GW are down");
	}
}
#!endif

failure_route[AUTTRONCAL] {
 	if (t_is_canceled()) {
		 exit;
	 }
	 if(t_check_status("401|407")) {
		 $avp(auser) = "926";
		 $avp(apass) = "C0nt4ct02019-";
		 uac_auth();
		 t_relay();
	 exit;
	 }
}

event_route[keepalive:dst-up] {
	xlog("L_NOTICE", "Gateway Activo: $rm $ru\n");
}
event_route[keepalive:dst-down] {
	xlog("L_NOTICE", "Gateway Inactivo $rm $ru\n");
}

